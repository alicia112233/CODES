// Define global variables for game statistics, settings, and states
INITIALIZE easyStats, mediumStats, hardStats WITH values (0, 0, 0, 0)
currentDifficulty <-- MEDIUM
INITIALIZE grid <-- a 2D array representing the game grid
currentPlayerTurn <-- PLAYER_X_TURN
gameOver <-- false
winner <-- EMPTY
gameState <-- MENU
isTwoPlayer <-- false

// Initialize confusion matrix and accuracy metrics for tracking AI performance
INITIALIZE confusionMatrix WITH values (0, 0, 0, 0)
trainingAccuracy <-- 0.0
testingAccuracy <-- 0.0

// Define animation variables for visual effects
INITIALIZE titleCellScales, titleRotations <-- arrays with title animation settings
titleAnimSpeed <-- 2.0
buttonVibrationOffset <-- 0.0
vibrationSpeed <-- 15.0
vibrationAmount <-- 2.0

// MAIN FUNCTION
BEGIN
    CALL InitWindow WITH parameters SCREEN_WIDTH, SCREEN_HEIGHT, "Tic-Tac-Toe"

    // Initialize linear regression weights for AI functionality
    INITIALIZE weights array WITH 0 values (for features and bias term)
    CALL TrainLinearRegression WITH parameters weights, 0.01, 1000
    CALL EvaluateLinearRegression WITH parameter weights

    WHILE WindowShouldClose() IS FALSE
        IF gameState IS MENU THEN
            CALL HandleMenuInput()
        ELSE IF gameState IS GAME THEN
            CALL UpdateGame()
        ELSE IF gameState IS GAME_OVER THEN
            CALL UpdateGameOver()
        ELSE IF gameState IS DIFFICULTY_SELECT THEN
            CALL HandleDifficultySelect()
        ELSE IF gameState IS AI_ANALYSIS THEN
            CALL HandleAIAnalysis()
        END IF

        CALL BeginDrawing()
            CALL ClearBackground WITH color RAYWHITE
            CALL DrawCurrentGameState()
        CALL EndDrawing()
    END WHILE

    CALL CloseWindow()
END

// AI Decision Making Function
FUNCTION MINIMAX()
    IF depth >= depthLimit THEN
        RETURN 0
    END IF

    score TO EvaluateBoard(board)
    IF score IS 10 OR score IS -10 THEN
        RETURN score
    END IF
    IF CheckDraw() IS TRUE THEN
        RETURN 0
    END IF

    IF isMaximizing THEN
        bestScore TO -1000
        FOR each empty cell
            MAKE move
            bestScore <-- MAX(bestScore, Minimax(board, false, depth + 1))
            UNDO move
        END FOR
        RETURN bestScore
    ELSE
        bestScore <-- 1000
        FOR each empty cell
            MAKE move
            bestScore <-- MIN(bestScore, Minimax(board, true, depth + 1))
            UNDO move
        END FOR
        RETURN bestScore
    END IF
ENDFUNCTION

// Linear Regression Training Function
FUNCTION TRAIN_LINEAR_REGRESSION()
    OPEN training data file
    FOR epoch FROM 1 TO epochs
        FOR each training example
            EXTRACT features AND outcome
            CALCULATE prediction
            UPDATE weights based on prediction error
        END FOR
    END FOR
    CLOSE file
ENDFUNCTION

// Game State Update Function
FUNCTION UPDATE_GAME()
    IF gameOver THEN
        RETURN
    END IF

    IF currentPlayerTurn IS PLAYER_X_TURN THEN
        CALL HandlePlayerTurn()
    ELSE
        IF isTwoPlayer THEN
            CALL HandlePlayerTurn()
        ELSE
            CALL AITurn()
        END IF
    END IF
ENDFUNCTION

// Menu Input Handler Function
FUNCTION HANDLE_MENU_INPUT()
    IF mouse button pressed THEN
        GET mouse position
        IF clicking single player button THEN
            isTwoPlayer <-- false
            gameState <-- DIFFICULTY_SELECT
        ELSE IF clicking two player button THEN
            isTwoPlayer <-- true
            gameState <-- GAME
            CALL InitGame()
        ELSE IF clicking AI analysis button THEN
            CALL LoadAndEvaluateDataset()
            gameState <-- AI_ANALYSIS
        END IF
    END IF
ENDFUNCTION

// Game Drawing Function
FUNCTION DRAW_GAME()
    FOR each cell in grid
        DRAW cell background
        IF cell contains X THEN
            DRAW X in blue
        ELSE IF cell contains O THEN
            DRAW O in red
        END IF
    END FOR
    DRAW grid lines
    DRAW turn indicator
    DRAW quit button
ENDFUNCTION

// Game Over Handler Function
FUNCTION UPDATE_GAME_OVER()
    IF mouse button pressed THEN
        GET mouse position
        IF clicking retry button THEN
            gameState <-- GAME
            CALL InitGame()
        ELSE IF clicking menu button THEN
            gameState <-- MENU
            CALL InitGame()
        END IF
    END IF
ENDFUNCTION

// AI Turn Function
FUNCTION AI_TURN()
    bestScore <-- -1000
    bestMove <-- none

    IF currentDifficulty IS EASY THEN
        IF random chance < 40% THEN
            MAKE random move
        ELSE
            MAKE first available move
        END IF
    ELSE IF currentDifficulty IS MEDIUM THEN
        depthLimit <-- 3
        // FIND best move using Minimax with depth limit
    ELSE IF currentDifficulty IS HARD THEN
        depthLimit <-- 9
        // FIND best move using Minimax with full depth
    END IF

    MAKE selected move
    CHECK for win or draw
    UPDATE game statistics
    SWITCH player turn
ENDFUNCTION

// Win Checker Function
FUNCTION CHECK_WIN()
    CHECK all rows
    CHECK all columns
    CHECK both diagonals
    IF winning line found THEN
        RETURN true
    END IF
    RETURN false
ENDFUNCTION

// Draw Checker Function
FUNCTION CHECK_DRAW()
    FOR each cell in grid
        IF cell is empty THEN
            RETURN false
        END IF
    END FOR
    RETURN true
ENDFUNCTION

// AI Analysis Drawing Function
FUNCTION DRAW_AI_ANALYSIS()
    DRAW title
    DRAW model performance statistics
    DRAW confusion matrix
    DRAW difficulty statistics
    DRAW scrollbar
    DRAW back button
ENDFUNCTION

// Difficulty Selection Handler Function
FUNCTION DRAW_DIFFICULTY_SELECT()
    DRAW title "Select Difficulty"
    DRAW back button at top left
    DRAW easy button with hover effect
    DRAW medium button with hover effect
    DRAW hard button with hover effect
    UPDATE cursor state based on hover
ENDFUNCTION

// Button Drawing Function
FUNCTION DRAW_BUTTON()
    IF button is hovered THEN
        APPLY horizontal vibration effect
    END IF
    DRAW button background
    DRAW button border
    IF button is player mode THEN
        DRAW player count symbol
    END IF
    DRAW button text
ENDFUNCTION

// Menu Drawing Function
FUNCTION DRAW_MENU()
    DRAW animated title grid
    UPDATE and DRAW X/O symbols in grid
    DRAW "Tic-Tac-Toe" text
    DRAW single player button
    DRAW two player button
    DRAW AI analysis button
ENDFUNCTION

// Game Initialization Function
FUNCTION INIT_GAME()
    CLEAR all grid cells
    gameOver <-- false
    winner <-- EMPTY
    currentPlayerTurn <-- PLAYER_X_TURN
ENDFUNCTION

// Player Turn Handler Function
FUNCTION HANDLE_PLAYER_TURN()
    IF mouse clicked THEN
        GET grid position from mouse coordinates
        IF cell is empty THEN
            MAKE move
            CHECK for win
            CHECK for draw
            SWITCH player turn
        END IF
    END IF
ENDFUNCTION